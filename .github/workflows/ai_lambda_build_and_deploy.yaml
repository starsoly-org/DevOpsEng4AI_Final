name: Build, Deploy and Promote AI Model

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: devopseng4ai
      FUNCTION_NAME: devopseng4ai
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}


    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set short SHA tag
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/devopseng4ai:${{ env.IMAGE_TAG }}
          provenance: false

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init & Apply
        working-directory: terraform_infra
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="image_uri=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/devopseng4ai:${IMAGE_TAG}" \
            -var="function_name=$FUNCTION_NAME"

      - name: Lambda Health Check
        id: healthcheck
        run: |
          echo "Waiting for cold start"
          sleep 15

          echo "Test payload"

          echo '{"x": 3.5}' | \
          aws lambda invoke \
            --function-name $FUNCTION_NAME \
            --qualifier \$LATEST \
            --payload fileb:///dev/stdin \
            response.json \
            --output json

          BODY=$(jq -r '.body' response.json)

          if echo "$BODY" | grep -q '"prediction"'; then
            echo "Lambda is working â€” prediction: $BODY"
            exit 0
          else
            echo "Error: 'prediction' missing"
            cat response.json
            exit 1
          fi

      - name: Promote to prod alias
        if: steps.healthcheck.outcome == 'success'
        run: |
          version=$(aws lambda publish-version \
            --function-name $FUNCTION_NAME \
            --query 'Version' --output text)

          aws lambda update-alias \
            --function-name $FUNCTION_NAME \
            --name prod \
            --function-version $version